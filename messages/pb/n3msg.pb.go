// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: n3msg.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// core message type for lowest-level data tuples
type SPOTuple struct {
	Subject              string   `protobuf:"bytes,1,opt,name=Subject,proto3" json:"Subject,omitempty"`
	Predicate            string   `protobuf:"bytes,2,opt,name=Predicate,proto3" json:"Predicate,omitempty"`
	Object               string   `protobuf:"bytes,3,opt,name=Object,proto3" json:"Object,omitempty"`
	Version              int64    `protobuf:"varint,4,opt,name=Version,proto3" json:"Version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SPOTuple) Reset()         { *m = SPOTuple{} }
func (m *SPOTuple) String() string { return proto.CompactTextString(m) }
func (*SPOTuple) ProtoMessage()    {}
func (*SPOTuple) Descriptor() ([]byte, []int) {
	return fileDescriptor_n3msg_a7d682c54853352a, []int{0}
}
func (m *SPOTuple) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SPOTuple) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SPOTuple.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SPOTuple) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SPOTuple.Merge(dst, src)
}
func (m *SPOTuple) XXX_Size() int {
	return m.Size()
}
func (m *SPOTuple) XXX_DiscardUnknown() {
	xxx_messageInfo_SPOTuple.DiscardUnknown(m)
}

var xxx_messageInfo_SPOTuple proto.InternalMessageInfo

func (m *SPOTuple) GetSubject() string {
	if m != nil {
		return m.Subject
	}
	return ""
}

func (m *SPOTuple) GetPredicate() string {
	if m != nil {
		return m.Predicate
	}
	return ""
}

func (m *SPOTuple) GetObject() string {
	if m != nil {
		return m.Object
	}
	return ""
}

func (m *SPOTuple) GetVersion() int64 {
	if m != nil {
		return m.Version
	}
	return 0
}

type N3Message struct {
	Payload              []byte   `protobuf:"bytes,1,opt,name=Payload,proto3" json:"Payload,omitempty"`
	SndId                string   `protobuf:"bytes,2,opt,name=SndId,proto3" json:"SndId,omitempty"`
	NameSpace            string   `protobuf:"bytes,3,opt,name=NameSpace,proto3" json:"NameSpace,omitempty"`
	CtxName              string   `protobuf:"bytes,4,opt,name=CtxName,proto3" json:"CtxName,omitempty"`
	DispId               string   `protobuf:"bytes,5,opt,name=DispId,proto3" json:"DispId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *N3Message) Reset()         { *m = N3Message{} }
func (m *N3Message) String() string { return proto.CompactTextString(m) }
func (*N3Message) ProtoMessage()    {}
func (*N3Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_n3msg_a7d682c54853352a, []int{1}
}
func (m *N3Message) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *N3Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_N3Message.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *N3Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_N3Message.Merge(dst, src)
}
func (m *N3Message) XXX_Size() int {
	return m.Size()
}
func (m *N3Message) XXX_DiscardUnknown() {
	xxx_messageInfo_N3Message.DiscardUnknown(m)
}

var xxx_messageInfo_N3Message proto.InternalMessageInfo

func (m *N3Message) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *N3Message) GetSndId() string {
	if m != nil {
		return m.SndId
	}
	return ""
}

func (m *N3Message) GetNameSpace() string {
	if m != nil {
		return m.NameSpace
	}
	return ""
}

func (m *N3Message) GetCtxName() string {
	if m != nil {
		return m.CtxName
	}
	return ""
}

func (m *N3Message) GetDispId() string {
	if m != nil {
		return m.DispId
	}
	return ""
}

type TxSummary struct {
	MsgCount             int64    `protobuf:"varint,1,opt,name=MsgCount,proto3" json:"MsgCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TxSummary) Reset()         { *m = TxSummary{} }
func (m *TxSummary) String() string { return proto.CompactTextString(m) }
func (*TxSummary) ProtoMessage()    {}
func (*TxSummary) Descriptor() ([]byte, []int) {
	return fileDescriptor_n3msg_a7d682c54853352a, []int{2}
}
func (m *TxSummary) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TxSummary) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TxSummary.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *TxSummary) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TxSummary.Merge(dst, src)
}
func (m *TxSummary) XXX_Size() int {
	return m.Size()
}
func (m *TxSummary) XXX_DiscardUnknown() {
	xxx_messageInfo_TxSummary.DiscardUnknown(m)
}

var xxx_messageInfo_TxSummary proto.InternalMessageInfo

func (m *TxSummary) GetMsgCount() int64 {
	if m != nil {
		return m.MsgCount
	}
	return 0
}

func init() {
	proto.RegisterType((*SPOTuple)(nil), "pb.SPOTuple")
	proto.RegisterType((*N3Message)(nil), "pb.N3Message")
	proto.RegisterType((*TxSummary)(nil), "pb.TxSummary")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// APIClient is the client API for API service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type APIClient interface {
	Publish(ctx context.Context, opts ...grpc.CallOption) (API_PublishClient, error)
	Query(ctx context.Context, in *N3Message, opts ...grpc.CallOption) (API_QueryClient, error)
}

type aPIClient struct {
	cc *grpc.ClientConn
}

func NewAPIClient(cc *grpc.ClientConn) APIClient {
	return &aPIClient{cc}
}

func (c *aPIClient) Publish(ctx context.Context, opts ...grpc.CallOption) (API_PublishClient, error) {
	stream, err := c.cc.NewStream(ctx, &_API_serviceDesc.Streams[0], "/pb.API/Publish", opts...)
	if err != nil {
		return nil, err
	}
	x := &aPIPublishClient{stream}
	return x, nil
}

type API_PublishClient interface {
	Send(*N3Message) error
	CloseAndRecv() (*TxSummary, error)
	grpc.ClientStream
}

type aPIPublishClient struct {
	grpc.ClientStream
}

func (x *aPIPublishClient) Send(m *N3Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *aPIPublishClient) CloseAndRecv() (*TxSummary, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(TxSummary)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *aPIClient) Query(ctx context.Context, in *N3Message, opts ...grpc.CallOption) (API_QueryClient, error) {
	stream, err := c.cc.NewStream(ctx, &_API_serviceDesc.Streams[1], "/pb.API/Query", opts...)
	if err != nil {
		return nil, err
	}
	x := &aPIQueryClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type API_QueryClient interface {
	Recv() (*SPOTuple, error)
	grpc.ClientStream
}

type aPIQueryClient struct {
	grpc.ClientStream
}

func (x *aPIQueryClient) Recv() (*SPOTuple, error) {
	m := new(SPOTuple)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// APIServer is the server API for API service.
type APIServer interface {
	Publish(API_PublishServer) error
	Query(*N3Message, API_QueryServer) error
}

func RegisterAPIServer(s *grpc.Server, srv APIServer) {
	s.RegisterService(&_API_serviceDesc, srv)
}

func _API_Publish_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(APIServer).Publish(&aPIPublishServer{stream})
}

type API_PublishServer interface {
	SendAndClose(*TxSummary) error
	Recv() (*N3Message, error)
	grpc.ServerStream
}

type aPIPublishServer struct {
	grpc.ServerStream
}

func (x *aPIPublishServer) SendAndClose(m *TxSummary) error {
	return x.ServerStream.SendMsg(m)
}

func (x *aPIPublishServer) Recv() (*N3Message, error) {
	m := new(N3Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _API_Query_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(N3Message)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(APIServer).Query(m, &aPIQueryServer{stream})
}

type API_QueryServer interface {
	Send(*SPOTuple) error
	grpc.ServerStream
}

type aPIQueryServer struct {
	grpc.ServerStream
}

func (x *aPIQueryServer) Send(m *SPOTuple) error {
	return x.ServerStream.SendMsg(m)
}

var _API_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.API",
	HandlerType: (*APIServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Publish",
			Handler:       _API_Publish_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Query",
			Handler:       _API_Query_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "n3msg.proto",
}

func (m *SPOTuple) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SPOTuple) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Subject) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintN3Msg(dAtA, i, uint64(len(m.Subject)))
		i += copy(dAtA[i:], m.Subject)
	}
	if len(m.Predicate) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintN3Msg(dAtA, i, uint64(len(m.Predicate)))
		i += copy(dAtA[i:], m.Predicate)
	}
	if len(m.Object) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintN3Msg(dAtA, i, uint64(len(m.Object)))
		i += copy(dAtA[i:], m.Object)
	}
	if m.Version != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintN3Msg(dAtA, i, uint64(m.Version))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *N3Message) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *N3Message) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Payload) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintN3Msg(dAtA, i, uint64(len(m.Payload)))
		i += copy(dAtA[i:], m.Payload)
	}
	if len(m.SndId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintN3Msg(dAtA, i, uint64(len(m.SndId)))
		i += copy(dAtA[i:], m.SndId)
	}
	if len(m.NameSpace) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintN3Msg(dAtA, i, uint64(len(m.NameSpace)))
		i += copy(dAtA[i:], m.NameSpace)
	}
	if len(m.CtxName) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintN3Msg(dAtA, i, uint64(len(m.CtxName)))
		i += copy(dAtA[i:], m.CtxName)
	}
	if len(m.DispId) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintN3Msg(dAtA, i, uint64(len(m.DispId)))
		i += copy(dAtA[i:], m.DispId)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TxSummary) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TxSummary) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MsgCount != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintN3Msg(dAtA, i, uint64(m.MsgCount))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintN3Msg(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *SPOTuple) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Subject)
	if l > 0 {
		n += 1 + l + sovN3Msg(uint64(l))
	}
	l = len(m.Predicate)
	if l > 0 {
		n += 1 + l + sovN3Msg(uint64(l))
	}
	l = len(m.Object)
	if l > 0 {
		n += 1 + l + sovN3Msg(uint64(l))
	}
	if m.Version != 0 {
		n += 1 + sovN3Msg(uint64(m.Version))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *N3Message) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovN3Msg(uint64(l))
	}
	l = len(m.SndId)
	if l > 0 {
		n += 1 + l + sovN3Msg(uint64(l))
	}
	l = len(m.NameSpace)
	if l > 0 {
		n += 1 + l + sovN3Msg(uint64(l))
	}
	l = len(m.CtxName)
	if l > 0 {
		n += 1 + l + sovN3Msg(uint64(l))
	}
	l = len(m.DispId)
	if l > 0 {
		n += 1 + l + sovN3Msg(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TxSummary) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MsgCount != 0 {
		n += 1 + sovN3Msg(uint64(m.MsgCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovN3Msg(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozN3Msg(x uint64) (n int) {
	return sovN3Msg(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SPOTuple) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowN3Msg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SPOTuple: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SPOTuple: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subject", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowN3Msg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthN3Msg
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subject = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Predicate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowN3Msg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthN3Msg
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Predicate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowN3Msg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthN3Msg
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Object = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowN3Msg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipN3Msg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthN3Msg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *N3Message) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowN3Msg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: N3Message: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: N3Message: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowN3Msg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthN3Msg
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SndId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowN3Msg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthN3Msg
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SndId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NameSpace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowN3Msg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthN3Msg
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NameSpace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CtxName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowN3Msg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthN3Msg
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CtxName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DispId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowN3Msg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthN3Msg
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DispId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipN3Msg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthN3Msg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TxSummary) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowN3Msg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TxSummary: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TxSummary: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgCount", wireType)
			}
			m.MsgCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowN3Msg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgCount |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipN3Msg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthN3Msg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipN3Msg(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowN3Msg
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowN3Msg
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowN3Msg
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthN3Msg
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowN3Msg
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipN3Msg(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthN3Msg = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowN3Msg   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("n3msg.proto", fileDescriptor_n3msg_a7d682c54853352a) }

var fileDescriptor_n3msg_a7d682c54853352a = []byte{
	// 312 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x91, 0xcb, 0x4a, 0xf3, 0x40,
	0x14, 0xc7, 0x3b, 0xcd, 0xd7, 0x4b, 0xce, 0x57, 0x41, 0x06, 0x91, 0x50, 0x24, 0x94, 0x6c, 0x0c,
	0x08, 0x45, 0xec, 0x13, 0x68, 0xdd, 0x74, 0xd1, 0x36, 0x26, 0xc5, 0x95, 0x9b, 0x49, 0x32, 0xc4,
	0x48, 0x2e, 0x43, 0x26, 0x03, 0xcd, 0x33, 0xf8, 0x02, 0x3e, 0x92, 0x4b, 0x1f, 0x41, 0xe2, 0x8b,
	0xc8, 0x4c, 0x2e, 0x05, 0x97, 0xbf, 0x73, 0x66, 0xce, 0xef, 0x3f, 0x67, 0xe0, 0x7f, 0xb6, 0x4a,
	0x79, 0xb4, 0x64, 0x45, 0x5e, 0xe6, 0x78, 0xc8, 0x7c, 0xab, 0x84, 0xa9, 0xe7, 0xec, 0x0f, 0x82,
	0x25, 0x14, 0x1b, 0x30, 0xf1, 0x84, 0xff, 0x46, 0x83, 0xd2, 0x40, 0x0b, 0x64, 0xeb, 0x6e, 0x87,
	0xf8, 0x0a, 0x74, 0xa7, 0xa0, 0x61, 0x1c, 0x90, 0x92, 0x1a, 0x43, 0xd5, 0x3b, 0x15, 0xf0, 0x25,
	0x8c, 0xf7, 0xcd, 0x35, 0x4d, 0xb5, 0x5a, 0x92, 0xf3, 0x9e, 0x69, 0xc1, 0xe3, 0x3c, 0x33, 0xfe,
	0x2d, 0x90, 0xad, 0xb9, 0x1d, 0x5a, 0xef, 0x08, 0xf4, 0xdd, 0x6a, 0x4b, 0x39, 0x27, 0x91, 0xf2,
	0x3a, 0xa4, 0x4a, 0x72, 0x12, 0x2a, 0xef, 0xcc, 0xed, 0x10, 0x5f, 0xc0, 0xc8, 0xcb, 0xc2, 0x4d,
	0xd8, 0x3a, 0x1b, 0x90, 0x69, 0x76, 0x24, 0xa5, 0x1e, 0x23, 0x01, 0x6d, 0x95, 0xa7, 0x82, 0x9c,
	0xb6, 0x2e, 0x8f, 0x92, 0x95, 0x55, 0x77, 0x3b, 0x94, 0x39, 0x1f, 0x63, 0xce, 0x36, 0xa1, 0x31,
	0x6a, 0x72, 0x36, 0x64, 0x5d, 0x83, 0x7e, 0x38, 0x7a, 0x22, 0x4d, 0x49, 0x51, 0xe1, 0x39, 0x4c,
	0xb7, 0x3c, 0x5a, 0xe7, 0x22, 0x6b, 0xb6, 0xa0, 0xb9, 0x3d, 0xdf, 0xbd, 0x80, 0x76, 0xef, 0x6c,
	0xf0, 0x0d, 0x4c, 0x1c, 0xe1, 0x27, 0x31, 0x7f, 0xc5, 0x67, 0x4b, 0xe6, 0x2f, 0xfb, 0x97, 0xcc,
	0x15, 0xf6, 0xb3, 0xac, 0x81, 0x8d, 0xb0, 0x0d, 0xa3, 0x27, 0x41, 0x8b, 0xea, 0xef, 0xd1, 0x99,
	0xc4, 0x6e, 0xf5, 0xd6, 0xe0, 0x16, 0x3d, 0x9c, 0x7f, 0xd6, 0x26, 0xfa, 0xaa, 0x4d, 0xf4, 0x5d,
	0x9b, 0xe8, 0xe3, 0xc7, 0x1c, 0xf8, 0x63, 0xf5, 0x4f, 0xab, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff,
	0xd2, 0x14, 0xc0, 0x65, 0xb6, 0x01, 0x00, 0x00,
}
